{"ast":null,"code":"var _jsxFileName = \"/Users/kevinc/prime/Tier2/SOLO/src/BallRouter/BallRouter.js\";\nimport React, { Component } from \"react\";\nimport { Transition } from \"react-transition-group\";\nimport { TimelineMax, TweenMax } from \"gsap/all\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport BallList from \"../BallList/BallList\";\n\nclass BallRouter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      cards: [],\n      init: false\n    };\n    this.addNewPerson = this.addNewPerson.bind(this);\n    this.removePerson = this.removePerson.bind(this);\n    this.updateNameHandler = this.updateNameHandler.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // getDerivedStateFromProps https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n    // \"Deriving state leads to verbose code and makes your components difficult to think about.\"\n    // \"Make sure youâ€™re familiar with simpler alternatives\"\n    // if the length is 0 and state.init is false\n    // set state of card to be true \n    if (state.cards.length === 0 && !state.init\n    /* <--- what happens? */\n    ) {\n        return {\n          cards: props.cards,\n          init: true\n        };\n      }\n\n    return null;\n  }\n\n  updateNameHandler(e) {\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  removePerson(id) {\n    this.setState({\n      cards: this.state.cards.filter(card => card.id !== id)\n    });\n  }\n\n  addNewPerson(e) {\n    e.preventDefault();\n\n    if (this.state.value !== \"\") {\n      this.setState({\n        cards: [].concat(this.state.cards, {\n          id: new Date().getTime(),\n          name: this.state.value\n        }),\n        value: \"\"\n      });\n    }\n  }\n\n  render() {\n    console.log(this.state.cards);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"List of Items\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"In this we don't pass the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"in\"), \" property to the component. The \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"<TransitionGroup>\"), \" component handles and passes the in boolean to each \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"<Transition>\"), \" element. Then in every transition child, we can access the \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"'in'\"), \" boolean on it's props.\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-12 col-md-6 mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.addNewPerson,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"personName\",\n      name: \"personName\",\n      className: \"form-control\",\n      onChange: this.updateNameHandler,\n      value: this.state.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn gsap-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Add Person\")))))), React.createElement(TransitionGroup, {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.cards.map((card, index) => React.createElement(BallList, {\n      key: card.id,\n      index: index,\n      card: card,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default BallRouter;","map":{"version":3,"sources":["/Users/kevinc/prime/Tier2/SOLO/src/BallRouter/BallRouter.js"],"names":["React","Component","Transition","TimelineMax","TweenMax","TransitionGroup","BallList","BallRouter","constructor","props","state","value","cards","init","addNewPerson","bind","removePerson","updateNameHandler","getDerivedStateFromProps","length","e","setState","target","id","filter","card","preventDefault","concat","Date","getTime","name","render","console","log","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Transition } from \"react-transition-group\";\nimport { TimelineMax, TweenMax} from \"gsap/all\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport BallList from \"../BallList/BallList\";\n\n\nclass BallRouter extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\",\n            cards: [],\n            init: false\n        };\n        this.addNewPerson = this.addNewPerson.bind(this);\n        this.removePerson = this.removePerson.bind(this);\n        this.updateNameHandler = this.updateNameHandler.bind(this);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        // getDerivedStateFromProps https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops\n        // \"Deriving state leads to verbose code and makes your components difficult to think about.\"\n        // \"Make sure youâ€™re familiar with simpler alternatives\"\n        // if the length is 0 and state.init is false\n        // set state of card to be true \n        if (state.cards.length === 0 && !state.init /* <--- what happens? */) {\n            return {\n                cards: props.cards,\n                init: true\n            };\n        }\n        return null;\n    }\n\n    updateNameHandler(e) {\n        this.setState({ value: e.target.value });\n    }\n\n    removePerson(id) {\n        this.setState({\n            cards: this.state.cards.filter(card => card.id !== id)\n        });\n    }\n\n    addNewPerson(e) {\n        e.preventDefault();\n        if (this.state.value !== \"\") {\n            this.setState({\n                cards: [].concat(this.state.cards, {\n                    id: new Date().getTime(),\n                    name: this.state.value,\n                }),\n                value: \"\"\n            });\n        }\n    }\n\n    render() {\n        console.log(this.state.cards);\n        return <div className=\"container\">\n            <div className=\"row\">\n\n                <div className=\"col-12\">\n                    <h3 className=\"text-center\">List of Items</h3>\n                    {/* <p className=\"lead\">Just like the previous sample, this animates the mount/unmount of a collection of components or elements wrapped in a <strong>&lt;Transition&gt;</strong> tag.</p> */}\n                    <p className=\"lead\">In this we don't pass the <strong>in</strong> property to the component. The <strong>&lt;TransitionGroup&gt;</strong> component handles and passes the in boolean to each <strong>&lt;Transition&gt;</strong> element. Then in every transition child, we can access the <strong>'in'</strong> boolean on it's props.</p>\n                    <hr />\n                </div>\n                {/* form */}\n                <div className=\"col-12 col-md-6 mb-5\">\n                    <form onSubmit={this.addNewPerson}>\n                        <div className=\"input-group\">\n                            <input\n                                type=\"text\"\n                                id=\"personName\"\n                                name=\"personName\"\n                                className=\"form-control\"\n                                onChange={this.updateNameHandler}\n                                value={this.state.value}\n                            />\n                            <div className=\"input-group-append\">\n                                <button className=\"btn gsap-btn\" type=\"submit\">Add Person</button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n            </div>\n\n\n            <TransitionGroup className=\"row\">\n                {this.state.cards.map((card, index) => (\n\n                    <BallList\n                        key={card.id}\n                        index={index}\n                        card={card}\n                       \n                    />\n                ))}\n\n            </TransitionGroup>\n\n        </div>;\n    }\n\n}\n\n\nexport default BallRouter;\n"]},"metadata":{},"sourceType":"module"}